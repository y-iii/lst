// Generated by CoffeeScript 1.9.2
var CanonicalFromFormula, CanonicalFromToken, CanonicalProduct, CanonicalReciprocal, CanonicalToPower, Cell, Editor, MaxPositive, ObjectFromPairs, Row, Table, Tokenize, f, link, table;

MaxPositive = function(list) {
  return Math.max.apply(this, [0].concat(list));
};

Table = (function() {
  function Table() {
    this.dom = document.createElement("table");
    this.rows = [];
    this.editor = new Editor;
  }

  Table.prototype.AddRow = function() {
    var i, r, ref, row;
    row = new Row(this);
    for (i = 1, ref = MaxPositive((function() {
      var j, len, ref1, results;
      ref1 = this.rows;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        r = ref1[j];
        results.push(r.cells.length);
      }
      return results;
    }).call(this)); i <= ref; i += 1) {
      row.AddCell();
    }
    this.rows.push(row);
  };

  Table.prototype.AddColumn = function() {
    var i, len, ref, row;
    ref = this.rows;
    for (i = 0, len = ref.length; i < len; i++) {
      row = ref[i];
      row.AddCell();
    }
  };

  Table.prototype.FillCell = function(row, col, text) {
    this.rows[row].cells[col].FillWith(text);
  };

  Table.prototype.ValueOfCell = function(row, col) {
    return this.rows[row].cells[col].Value();
  };

  Table.prototype.InsertIntoPageAt = function(element) {
    element.appendChild(this.dom);
    this.editor.InsertIntoPageAt(element);
  };

  return Table;

})();

Row = (function() {
  function Row(table) {
    this.dom = table.dom.insertRow();
    this.cells = [];
    this.editor = table.editor;
  }

  Row.prototype.AddCell = function() {
    var cell;
    cell = new Cell(this);
    this.cells.push(cell);
  };

  Row.prototype.ValueOfCell = function(col) {
    return this.cells[col].Value();
  };

  return Row;

})();

Cell = (function() {
  function Cell(row) {
    this.dom = row.dom.insertCell();
    this.dom.classList.add("lst_cell");
    this.dom.addEventListener("dblclick", row.editor.ShowFor(this));
  }

  Cell.prototype.FillWith = function(text) {
    var content;
    while (this.dom.firstChild != null) {
      this.dom.removeChild(this.dom.firstChild);
    }
    content = document.createTextNode(text);
    this.dom.appendChild(content);
  };

  Cell.prototype.Value = function() {
    var ref;
    return ((ref = this.dom.firstChild) != null ? ref.nodeValue : void 0) || "";
  };

  return Cell;

})();

Editor = (function() {
  function Editor() {
    this.CommitAndHide = this.CommitAndHideGenerator();
    this.RevertAndHide = this.RevertAndHideGenerator();
    this.KeyHandler = this.KeyHandlerGenerator();
    this.dom = document.createElement("textarea");
    this.dom.style.position = "absolute";
    this.dom.style.visibility = "hidden";
    this.dom.addEventListener("blur", this.CommitAndHide);
    this.dom.addEventListener("keydown", this.KeyHandler);
    this.cell = null;
  }

  Editor.prototype.InsertIntoPageAt = function(element) {
    element.appendChild(this.dom);
  };

  Editor.prototype.ShowFor = function(cell) {
    var editor;
    editor = this;
    return function() {
      editor.dom.value = cell.Value();
      editor.dom.style.top = cell.dom.offsetTop + "px";
      editor.dom.style.left = cell.dom.offsetLeft + "px";
      editor.dom.style.visibility = "visible";
      editor.dom.focus();
      editor.cell = cell;
    };
  };

  Editor.prototype.CommitAndHideGenerator = function() {
    var editor;
    editor = this;
    return function() {
      var ref;
      if ((ref = editor.cell) != null) {
        ref.FillWith(editor.dom.value);
      }
      editor.cell = null;
      editor.dom.style.visibility = "hidden";
    };
  };

  Editor.prototype.RevertAndHideGenerator = function() {
    var editor;
    editor = this;
    return function() {
      editor.cell = null;
      editor.dom.style.visibility = "hidden";
    };
  };

  Editor.prototype.KeyHandlerGenerator = function() {
    var editor;
    editor = this;
    return function(event) {
      var key;
      if (event.defaultPrevented) {
        return;
      }
      key = event.key || event.keyCode;
      switch (key) {
        case "Enter":
        case 13:
          editor.CommitAndHide();
          event.preventDefault();
          break;
        case "Escape":
        case 27:
          editor.RevertAndHide();
          event.preventDefault();
      }
    };
  };

  return Editor;

})();

Tokenize = function(str) {
  var i, len, ref, results, x;
  ref = str.split(/([\*\/\^\(\)])/);
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    x = ref[i];
    if (x.trim().length > 0) {
      results.push(x.trim());
    }
  }
  return results;
};

CanonicalFromFormula = function(formula) {
  var canonicals, i, index, len, operand, operator, ref, token, tokens;
  tokens = Tokenize(formula);
  canonicals = [];
  for (index = i = 0, len = tokens.length; i < len; index = i += 2) {
    token = tokens[index];
    ref = [tokens[index - 1] || "*", token], operator = ref[0], operand = ref[1];
    switch (operator) {
      case "*":
        canonicals.push(CanonicalFromToken(operand));
        break;
      case "/":
        canonicals.push(CanonicalReciprocal(CanonicalFromToken(operand)));
        break;
      case "^":
        canonicals.push(CanonicalToPower(canonicals.pop(), operand));
    }
  }
  return canonicals.reduce(CanonicalProduct, {
    factor: 1,
    units: {}
  });
};

CanonicalFromToken = function(token) {
  var obj;
  switch (typeof token) {
    case "number":
      return {
        factor: +token,
        units: {}
      };
    case "string":
      return {
        factor: 1,
        units: (
          obj = {},
          obj["" + token] = 1,
          obj
        )
      };
    case "object":
      return token;
  }
};

ObjectFromPairs = function(pairList) {
  return pairList.reduce((function(acc, pair) {
    acc[pair[0]] = pair[1];
    return acc;
  }), {});
};

CanonicalReciprocal = function(x) {
  var k, v;
  return {
    factor: 1 / x.factor,
    units: ObjectFromPairs((function() {
      var ref, results;
      ref = x.units;
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push([k, -v]);
      }
      return results;
    })())
  };
};

CanonicalToPower = function(x, pow) {
  var k, v;
  return {
    factor: Math.pow(x.factor, +pow),
    units: ObjectFromPairs((function() {
      var ref, results;
      ref = x.units;
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push([k, +pow]);
      }
      return results;
    })())
  };
};

CanonicalProduct = function(x, y) {
  return null;
};

table = new Table;

table.AddRow();

table.AddRow();

table.AddRow();

table.AddColumn();

table.AddColumn();

table.FillCell(0, 0, "кг");

table.FillCell(1, 0, "м");

table.FillCell(2, 0, "с");

table.FillCell(0, 1, "Вт");

table.FillCell(1, 1, "кг * м / (с * с^2) * м");

table.FillCell(2, 1, "кг / (2*с)^2 * м");

table.InsertIntoPageAt(document.body);

link = document.createElement("a");

link.appendChild(document.createTextNode("test"));

f = function(e) {
  console.log(Tokenize(table.ValueOfCell(2, 1)));
  console.log(CanonicalFromFormula(table.ValueOfCell(2, 1)));
  return e.preventDefault();
};

link.addEventListener("click", f);

link.href = "\#";

document.body.appendChild(link);

f({
  preventDefault: function() {}
});
