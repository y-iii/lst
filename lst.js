// Generated by CoffeeScript 1.9.2
var Cell, Editor, MaxPositive, Row, Table, editor, table;

MaxPositive = function(list) {
  return Math.max.apply(this, [0].concat(list));
};

Table = (function() {
  function Table(editor) {
    this.dom = document.createElement("table");
    this.rows = [];
    this.editor = editor;
  }

  Table.prototype.AddRow = function() {
    var i, r, ref, row;
    row = new Row(this);
    for (i = 1, ref = MaxPositive((function() {
      var j, len, ref1, results;
      ref1 = this.rows;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        r = ref1[j];
        results.push(r.cells.length);
      }
      return results;
    }).call(this)); i <= ref; i += 1) {
      row.AddCell();
    }
    this.rows.push(row);
  };

  Table.prototype.AddColumn = function() {
    var i, len, ref, row;
    ref = this.rows;
    for (i = 0, len = ref.length; i < len; i++) {
      row = ref[i];
      row.AddCell();
    }
  };

  Table.prototype.FillCell = function(row, col, text) {
    this.rows[row].cells[col].FillWith(text);
  };

  Table.prototype.InsertIntoPageAt = function(element) {
    element.appendChild(this.dom);
  };

  return Table;

})();

Row = (function() {
  function Row(table) {
    this.dom = table.dom.insertRow();
    this.cells = [];
    this.editor = table.editor;
  }

  Row.prototype.AddCell = function() {
    var cell;
    cell = new Cell(this);
    this.cells.push(cell);
  };

  return Row;

})();

Cell = (function() {
  function Cell(row) {
    this.dom = row.dom.insertCell();
    this.dom.classList.add("lst_cell");
    this.dom.ondblclick = editor.ShowFor(this);
  }

  Cell.prototype.FillWith = function(text) {
    var content;
    while (this.dom.firstChild != null) {
      this.dom.removeChild(this.dom.firstChild);
    }
    content = document.createTextNode(text);
    this.dom.appendChild(content);
  };

  return Cell;

})();

Editor = (function() {
  function Editor() {
    this.dom = document.createElement("textarea");
    this.dom.style.position = "absolute";
    this.dom.style.visibility = "hidden";
    this.dom.onblur = this.CommitAndHide();
    this.cell = null;
  }

  Editor.prototype.InsertIntoPageAt = function(element) {
    element.appendChild(this.dom);
  };

  Editor.prototype.ShowFor = function(cell) {
    var editor;
    editor = this;
    return function() {
      var ref;
      editor.dom.value = ((ref = cell.dom.firstChild) != null ? ref.nodeValue : void 0) || "";
      editor.dom.style.top = cell.dom.offsetTop + "px";
      editor.dom.style.left = cell.dom.offsetLeft + "px";
      editor.dom.style.visibility = "visible";
      editor.dom.focus();
      editor.cell = cell;
    };
  };

  Editor.prototype.CommitAndHide = function() {
    var editor;
    editor = this;
    return function() {
      var ref;
      if ((ref = editor.cell) != null) {
        ref.FillWith(editor.dom.value);
      }
      editor.cell = null;
      editor.dom.style.visibility = "hidden";
    };
  };

  return Editor;

})();

editor = new Editor;

editor.InsertIntoPageAt(document.body);

table = new Table(editor);

table.AddRow();

table.AddRow();

table.AddRow();

table.AddColumn();

table.AddColumn();

table.FillCell(0, 0, "X1");

table.FillCell(1, 0, "X2");

table.FillCell(2, 0, "X3");

table.InsertIntoPageAt(document.body);
